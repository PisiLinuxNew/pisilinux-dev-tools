#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# just put a .pisipackager file in your home and fill it like
#
# name = Ayhan Yalçınsoy
# email = ayhanyalcinsoy@pisilinux.org
#
#Thanks to Onur Küçük for python2 version of the this script

import os
import sys
import time
import string

packagerfile = ".pisipackager"

data = {"date": time.strftime("%Y-%m-%d"),
        "year": time.strftime("%Y")}

temp_pspec = '''<?xml version="1.0" ?>
<!DOCTYPE PISI SYSTEM "https://pisilinux.org.tr/projeler/pisi/pisi-spec.dtd">
<PISI>
    <Source>
        <Name>%(package)s</Name>
        <Homepage></Homepage>
        <Packager>
            <Name>%(packager_name)s</Name>
            <Email>%(packager_email)s</Email>
        </Packager>
        <License>GPLv2</License>
        <Icon>%(package)s</Icon>
        <IsA>app:gui</IsA>
        <Summary></Summary>
        <Description></Description>
        <Archive sha1sum="add_sha1sum_here" type="targz">add_arhive_address_here</Archive>
        <BuildDependencies>
            <Dependency versionFrom=""></Dependency>
            <Dependency></Dependency>
        </BuildDependencies>
        <Patches>
            <!--
            <Patch></Patch>
            -->
        </Patches>
    </Source>

    <Package>
        <Name>%(package)s</Name>
        <RuntimeDependencies>
            <Dependency></Dependency>
            <Dependency></Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="executable">/usr/bin</Path>
            <Path fileType="library">/usr/lib</Path>
            <Path fileType="data">/usr/share</Path>
            <Path fileType="localdata">/usr/share/locale</Path>
            <Path fileType="doc">/usr/share/doc</Path>
        </Files>
        <!--
        <AdditionalFiles>
            <AdditionalFile owner="root" permission="0644" target="/usr/share/applications/%(package)s.desktop">%(package)s.desktop</AdditionalFile>
        </AdditionalFiles>
        -->
        <Conflicts>
            <Package releaseTo="29">sleep</Package>
        </Conflicts>
        <!--
        <Provides>
            <COMAR script="package.py">System.Package</COMAR>
            <COMAR script="service.py">System.Service</COMAR>
        </Provides>
        -->
    </Package>
    
    <Package>
        <Name>%(package)s-devel</Name>
        <RuntimeDependencies>
            <Dependency release="current">%(package)s</Dependency>
            <Dependency></Dependency>
        </RuntimeDependencies>
        <Files>
            <Path fileType="header">/usr/include</Path>
            <Path fileType="library">/usr/lib/pkgconfig</Path>
        </Files>
    </Package>

    <History>
        <Update release="1">
            <Date>%(date)s</Date>
            <Version></Version>
            <Comment>First release</Comment>
            <Name>%(packager_name)s</Name>
            <Email>%(packager_email)s</Email>
        </Update>
    </History>
</PISI>
'''

temp_actions = '''#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Licensed under the GNU General Public License, version 3.
# See the file https://gnu.org/licenses/gpl-3.0.txt.

from pisi.actionsapi import cmaketools, pisitools, shelltools, get


def setup():
    shelltools.makedirs("build")
    shelltools.cd("build")
    cmaketools.configure("-DCMAKE_INSTALL_PREFIX=/usr \
                          -DCMAKE_INSTALL_LIBDIR=/usr/lib ", sourceDir="..")

def build():
    shelltools.cd("build")
    cmaketools.make()

def install():
    shelltools.cd("build")
    cmaketools.rawInstall("DESTDIR=%%s" %% get.installDIR())
    shelltools.cd("..")
    pisitools.dodoc("AUTHORS", "COPYING")
'''

temp_desktop = '''[Desktop Entry]
Type=Application
Version=1.0
Encoding=UTF-8
Name=%(package_cap)s
Name[tr]=%(package_cap)s
GenericName=%(package_cap)s
GenericName[tr]=%(package_cap)s
Icon=%(package)s
Exec=%(package)s
Terminal=false
StartupNotify=false
Categories=Application;Game;ArcadeGame;
'''

temp_service = '''
from comar.service import *

serviceType = "local"
serviceConf = "%(package)s"
serviceDefault = "conditional"

serviceDesc = _({"en": "%(package_cap)s",
                 "tr": "%(package_cap)s"})

@synchronized
def start():
    startService(command="/usr/sbin/%(package)s",
                 args = config.get("args", "destroy"),
                 donotify=True)

@synchronized
def stop():
    stopService(command="/usr/sbin/%(package)s",
                donotify=True)

def ready():
    import os
    status = is_on()
    if status == "on" or (status == "conditional" and os.path.exists("/sys/coffee/ready")):
        start()

def status():
    return checkDaemon("/var/run/%(package)s.pid")

'''

temp_postscript = '''#/usr/bin/python
# -*- coding: utf-8 -*-

import os

def postInstall():
    print "FIXME"

'''

temp_translation = '''<?xml version="1.0" ?>
<PISI>
    <Source>
        <Name>%(package)s</Name>
        <Summary xml:lang=""></Summary>
        <Description xml:lang=""></Description>
    </Source>
</PISI>
'''


def write(filename, data):
    try:
        f = open("%s/%s" % (target, filename), "w")
        f.write(data)
        f.close()
    except (IOError, OSError):
        print("Could not write file %s/%s" % (target, filename))


def create_dirs():
    try:
        os.makedirs("%s/files" % target)
        os.makedirs("%s/comar" % target)
    except FileExistsError:
        print("Could not make directory %s" % target)
        sys.exit(1)


def readConfig():
    home = os.getenv("HOME", "")
    cfg = "%s/%s" % (home, packagerfile)
    d = {"name": "", "email": ""}

    if home != "" and os.path.exists(cfg):
        for line in open(cfg):
            if line != "" and not line.startswith("#") and "=" in line:
                l, m = line.split("=", 1)
                k = l.strip()
                v = m.strip()
                if k in ["name", "email"]:
                    if v.startswith('"') or v.startswith("'"):
                        v = v[1:-1]
                    d[k.strip()] = v.strip()

    return d["name"], d["email"]


# some checks
if len(sys.argv) < 2:
    print("Usage : %s NewPackageDir" % sys.argv[0])
    sys.exit(0)
else:
    target = sys.argv[1]
    data["packagedir"], data["package"] = os.path.split(target)
    data["package_cap"] = str.capitalize(data["package"])

if os.path.exists(target):
    print("%s already exists, please remove it first" % target)
    sys.exit(1)
elif " " in data["package"]:
    print("You should not use empty space in package name")
    sys.exit(1)

# here we go
data["packager_name"], data["packager_email"] = readConfig()
create_dirs()
write("pspec.xml", temp_pspec % data)
write("actions.py", temp_actions % data)
write("translations.xml", temp_translation % data)
write("files/%s.desktop" % data["package"], temp_desktop % data)
write("comar/service.py", temp_service % data)
write("comar/package.py", temp_postscript)
